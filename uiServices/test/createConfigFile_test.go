// file: api_test.go
package main

import (
	"errors"
	"fmt"
	"github.com/DATA-DOG/godog"
	"github.com/DATA-DOG/godog/gherkin"
	"io/ioutil"
	"net/http"
	"io"
	"strings"
	"os"
	"github.com/Sirupsen/logrus"
	"github.com/xtracdev/automated-perf-test/uiServices/src"
)

// valid json file
const validJson = `{
        "apiName": "GodogConfig",
       "targetHost": "localhost",
       "targetPort": "9191",
       "numIterations": 1000,
       "allowablePeakMemoryVariance": 30,
       "allowableServiceResponseTimeVariance": 30,
       "testCaseDir": "./definitions/testCases",
       "testSuiteDir": "./definitions/testSuites",
        "baseStatsOutputDir": "./envStats",
       "reportOutputDir": "./report",
       "concurrentUsers": 50,
       "testSuite": "suiteFileName.xml",
       "memoryEndpoint": "/alt/debug/vars",
       "requestDelay": 5000,
       "TPSFreq": 30,
       "rampUsers": 5,
       "rampDelay": 15
       }`

// record response   //autogenerated code
type apiFeature struct {
	resp   *http.Response
	client *http.Client
}

// reset response  //autogenerated code
func (a *apiFeature) resetResponse() {
	a.client = &http.Client{}
	a.resp = nil
}

// This functions does the "WHEN" clause in feature file eg When I send "POST" request to "/configs"
func (a *apiFeature) iSendrequestTo(method, endpoint string) (err error) {
	response, err := makeRequest(a.client, method, endpoint, "")
	if err != nil {
		return err
	}

	a.resp = response
	return nil
}

// This functions does the "THEN" clause in feature file eg Then the response code should be '405'
func (a *apiFeature) theResponseCodeShouldBe(code int) error {

	if code != a.resp.StatusCode {
		return fmt.Errorf("expected response code to be: %d, but actual is: %d", code, a.resp.StatusCode)
	}
	return nil
}

// This functions does the "AND" clause in the feature file eg And he response should match json: { "apiNamename":"filename"}
func (a *apiFeature) theResponseShouldMatchJSON(body *gherkin.DocString) (err error) {
	//not a valid step for the existing tests because we expect a 201
	return nil
}

func (a *apiFeature) theResponseBodyShouldBeEmpty() error {

	defer a.resp.Body.Close()

	bodyBytes, err := ioutil.ReadAll(a.resp.Body)

	if err != nil {
		logrus.Error(err)
		return err
	}

	if len(bodyBytes) > 0 {
		return errors.New("Body should be empty")
	}
	return nil
}

func (a *apiFeature) theConfigFileWasCreated() error {
	path := os.Getenv("GOPATH") + "/src/github.com/xtracdev/automated-perf-test/uiServices/test/GodogConfig.xml"

	fileExists := services.FilePathExist(path)


	if (!fileExists){
		return fmt.Errorf("File Does Not Exist")
	}
	logrus.Println("File Exists")
	return nil
}

func (a *apiFeature) iSendRequestToWithABody(method, endpoint string) error {

	response, err := makeRequest(a.client, method, endpoint, validJson)
	if err != nil {
		return err
	}
	a.resp = response
	return nil
}

func makeRequest(client *http.Client, method, endpoint, body string) (*http.Response, error) {

	var reqBody io.Reader
	if body != "" {
		reqBody = strings.NewReader(body)
	}

	req, err := http.NewRequest(method, "http://localhost:9191"+endpoint, reqBody)
	req.Header.Set("configPathDir", fmt.Sprintf("%s/src/github.com/xtracdev/automated-perf-test/uiServices/test/",os.Getenv("GOPATH")))

	if err != nil {
		return nil, err
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// this prints results to command line for users to read
func FeatureContext(s *godog.Suite) {
	api := &apiFeature{}

	s.BeforeScenario(func(interface{}) {

		api.resetResponse()

	})

	s.Step(`^I send "(GET|POST|PUT|DELETE)" request to "([^"]*)"$`, api.iSendrequestTo)
	s.Step(`^the response code should be (\d+)$`, api.theResponseCodeShouldBe)
	s.Step(`^the response should match json:$`, api.theResponseShouldMatchJSON)
	s.Step(`^the response body should be empty$`, api.theResponseBodyShouldBeEmpty)
	s.Step(`^the config file was created$`, api.theConfigFileWasCreated)
	s.Step(`^the automated performance ui server is available$`, theAutomatedPerformanceUiServerIsAvailable)
	s.Step(`^I send "([^"]*)" request to "([^"]*)" with a body$`, api.iSendRequestToWithABody)
}

func theAutomatedPerformanceUiServerIsAvailable() error {
	go http.ListenAndServe(":9191", services.GetRouter())

	return nil
}
