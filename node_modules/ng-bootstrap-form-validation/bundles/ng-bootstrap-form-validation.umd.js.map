{
  "version": 3,
  "file": "ng-bootstrap-form-validation.umd.js",
  "sources": [
    "ng://ng-bootstrap-form-validation/src/lib/ng-bootstrap-form-validation.module.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/form-group-component/form-group-component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Services/error-message.service.ts",
    "ng://ng-bootstrap-form-validation/src/lib/default-errors.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Directives/form-validation.directive.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { FormGroupComponent } from \"./Components/form-group-component/form-group-component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { ErrorMessage } from \"./Models/ErrorMessage\";\nimport { CUSTOM_ERROR_MESSAGES } from \"./Tokens/tokens\";\n\n@NgModule({\n  declarations: [FormValidationDirective, FormGroupComponent],\n  imports: [CommonModule],\n  providers: [ErrorMessageService],\n  exports: [FormValidationDirective, FormGroupComponent]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(customErrorMessages?: ErrorMessage[]): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: ErrorMessageService,\n          useFactory: errorMessageServiceFactory,\n          deps: [CUSTOM_ERROR_MESSAGES]\n        },\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: customErrorMessages\n        }\n      ]\n    };\n  }\n}\n\nexport function errorMessageServiceFactory(\n  customErrorMessages?: ErrorMessage[]\n) {\n  return new ErrorMessageService(customErrorMessages);\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessage } from \"../../Models/ErrorMessage\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\n\n@Component({\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <span class=\"help-block\" *ngFor=\"let message of messages\">{{message}}</span>\n  `\n})\nexport class FormGroupComponent {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input() customErrorMessages: ErrorMessage[] = [];\n\n  @Input() validationDisabled: boolean = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {}\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  get errorMessages(): ErrorMessage[] {\n    return [\n      ...this.customErrorMessages,\n      ...this.errorMessageService.errorMessages\n    ];\n  }\n\n  get messages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) return messages;\n    this.FormControlNames.filter(c => !c.valid).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(error => error.error === key);\n        if (!error) return;\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n    return messages;\n  }\n}\n",
    "import { Inject, Injectable } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\n\n@Injectable()\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES)\n    public customErrorMessages: ErrorMessage[] = []\n  ) {}\n\n  get errorMessages() {\n    return [...this.customErrorMessages, ...this.defaultErrors];\n  }\n}\n",
    "import { ErrorMessage } from \"./Models/ErrorMessage\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  OnInit,\n  EventEmitter,\n  Output\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive({\n  selector: \"form[formGroup]\"\n})\nexport class FormValidationDirective implements OnInit {\n  @Input() formGroup: FormGroup;\n  @Output() validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      if (formGroup.controls[key] instanceof FormGroup) {\n        this.markAsTouchedAndDirty(formGroup.controls[key] as FormGroup);\n      } else {\n        formGroup.controls[key].markAsDirty();\n        formGroup.controls[key].markAsTouched();\n        formGroup.controls[key].updateValueAndValidity();\n      }\n    });\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n"
  ],
  "names": [
    "HostBinding",
    "Input",
    "ContentChildren",
    "FormControlName",
    "ElementRef",
    "Injectable",
    "Output",
    "Directive",
    "FormGroup",
    "EventEmitter"
  ],
  "mappings": "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"
}
