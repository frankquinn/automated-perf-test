{
  "version": 3,
  "file": "ng-bootstrap-form-validation.umd.min.js",
  "sources": [
    "ng://ng-bootstrap-form-validation/src/lib/Directives/form-validation.directive.ts",
    "ng://ng-bootstrap-form-validation/src/lib/default-errors.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Services/error-message.service.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/form-group-component/form-group-component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/ng-bootstrap-form-validation.module.ts"
  ],
  "sourcesContent": [
    "import {\n  Directive,\n  Input,\n  HostListener,\n  OnInit,\n  EventEmitter,\n  Output\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive({\n  selector: \"form[formGroup]\"\n})\nexport class FormValidationDirective implements OnInit {\n  @Input() formGroup: FormGroup;\n  @Output() validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      if (formGroup.controls[key] instanceof FormGroup) {\n        this.markAsTouchedAndDirty(formGroup.controls[key] as FormGroup);\n      } else {\n        formGroup.controls[key].markAsDirty();\n        formGroup.controls[key].markAsTouched();\n        formGroup.controls[key].updateValueAndValidity();\n      }\n    });\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
    "import { ErrorMessage } from \"./Models/ErrorMessage\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n",
    "import { Inject, Injectable } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\n\n@Injectable()\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES)\n    public customErrorMessages: ErrorMessage[] = []\n  ) {}\n\n  get errorMessages() {\n    return [...this.customErrorMessages, ...this.defaultErrors];\n  }\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessage } from \"../../Models/ErrorMessage\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\n\n@Component({\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <span class=\"help-block\" *ngFor=\"let message of messages\">{{message}}</span>\n  `\n})\nexport class FormGroupComponent {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input() customErrorMessages: ErrorMessage[] = [];\n\n  @Input() validationDisabled: boolean = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {}\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  get errorMessages(): ErrorMessage[] {\n    return [\n      ...this.customErrorMessages,\n      ...this.errorMessageService.errorMessages\n    ];\n  }\n\n  get messages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) return messages;\n    this.FormControlNames.filter(c => !c.valid).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(error => error.error === key);\n        if (!error) return;\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n    return messages;\n  }\n}\n",
    "import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { FormGroupComponent } from \"./Components/form-group-component/form-group-component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { ErrorMessage } from \"./Models/ErrorMessage\";\nimport { CUSTOM_ERROR_MESSAGES } from \"./Tokens/tokens\";\n\n@NgModule({\n  declarations: [FormValidationDirective, FormGroupComponent],\n  imports: [CommonModule],\n  providers: [ErrorMessageService],\n  exports: [FormValidationDirective, FormGroupComponent]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(customErrorMessages?: ErrorMessage[]): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: ErrorMessageService,\n          useFactory: errorMessageServiceFactory,\n          deps: [CUSTOM_ERROR_MESSAGES]\n        },\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: customErrorMessages\n        }\n      ]\n    };\n  }\n}\n\nexport function errorMessageServiceFactory(\n  customErrorMessages?: ErrorMessage[]\n) {\n  return new ErrorMessageService(customErrorMessages);\n}\n"
  ],
  "names": [
    "FormValidationDirective",
    "this",
    "validSubmit",
    "EventEmitter",
    "markAsTouchedAndDirty",
    "formGroup",
    "valid",
    "emit",
    "value",
    "_this",
    "Object",
    "keys",
    "controls",
    "forEach",
    "key",
    "FormGroup",
    "markAsDirty",
    "markAsTouched",
    "updateValueAndValidity",
    "prototype",
    "ngOnInit",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "propDecorators",
    "Input",
    "Output",
    "DEFAULT_ERRORS",
    "error",
    "format",
    "label",
    "requiredLength",
    "max",
    "min",
    "customErrorMessages",
    "defaultErrors",
    "defineProperty",
    "ErrorMessageService",
    "get",
    "concat",
    "Injectable",
    "FormGroupComponent",
    "elRef",
    "errorMessageService",
    "enumerable",
    "configurable",
    "FormControlNames",
    "some",
    "c",
    "dirty",
    "touched",
    "validationDisabled",
    "nativeElement",
    "querySelector",
    "textContent",
    "trim",
    "errorMessages",
    "filter",
    "control",
    "errors",
    "messages",
    "push",
    "ctorParameters",
    "ElementRef",
    "ContentChildren",
    "FormControlName",
    "hasErrors",
    "HostBinding",
    "hasSuccess",
    "NgBootstrapFormValidationModule",
    "deps",
    "CUSTOM_ERROR_MESSAGES"
  ],
  "mappings": "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"
}
